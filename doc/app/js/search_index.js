var search_data = {"index":{"searchIndex":["analystsopinion","applicationcontroller","applicationhelper","assetvalue","averagepriceearningsratio","basicextractor","basicindexparser","boerseextractor","currentpriceearningsratio","dataminingerror","daxindexparser","dowindexparser","ebitmargin","equityratio","finanzenextractor","indiceshelper","insiderdeal","insiderdealscontroller","insiderdealshelper","invalidisinerror","momentum","onvistaextractor","onvistaindexvalueextractor","onvistaquarterlyfiguresextractor","onvistastockvalueextractor","profitgrowth","profitrevision","ratingunit","reaction","returnonequity","reversal","scorecard","scorecardscontroller","scorecardshelper","share","sharescontroller","shareshelper","stockindex","stockindicescontroller","stockpricedevhalfyear","stockpricedevoneyear","stockprocessor","unexpectedhtmlstructure","util","add_millenium()","add_millennium()","assemble_url()","assess_share()","avoid_exchange_closed()","avoid_weekend()","check_place()","construct_search_url()","contains_escaped_html_sequence?()","content_to_file()","create()","create()","create()","crop_millennium()","days_between()","destroy()","destroy()","destroy()","destroy()","edit()","edit()","edit()","ensure_string()","extract_analysts_opinion()","extract_analysts_opinion()","extract_analysts_opinion()","extract_average_price_earnings_ratio()","extract_average_price_earnings_ratio()","extract_current_price_earnings_ratio()","extract_current_price_earnings_ratio()","extract_ebit_margin()","extract_ebit_margin()","extract_equity_ratio()","extract_equity_ratio()","extract_index_value_on()","extract_insider_deals()","extract_profit_growth()","extract_profit_revision()","extract_profit_revision()","extract_proft_growth()","extract_reaction_on_figures()","extract_reaction_on_figures()","extract_reaction_on_figures()","extract_release_date()","extract_roe()","extract_roe()","extract_roe()","extract_stock_name()","extract_stock_name()","extract_stock_name()","extract_stock_price()","extract_stock_price()","extract_stock_price()","extract_stock_price_dev_half_year()","extract_stock_price_dev_half_year()","extract_stock_price_dev_one_year()","extract_stock_price_dev_one_year()","extract_stock_value_on()","extract_three_month_reversal()","extract_three_month_reversal()","format()","format_date_time()","get_asset_name()","get_dow_entries()","get_entries_of_index()","get_on_vista_index_id()","get_stock_exchange_id()","go()","index()","index()","index()","index()","information_expired()","isin_to_wkn()","l10n_f()","l10n_f_k()","last_work_day_before()","lookup_insider_trades()","map_stock_exchange()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","open_sub_page()","perf()","perform_action_on_selection()","perform_search()","process_dax_entries()","process_dow_entries()","rate_analysts_opinion()","rate_average_price_earnings_ratio()","rate_current_price_earnings_ratio()","rate_ebit_margin()","rate_equity_ratio()","rate_profit_growth()","rate_profit_revision()","rate_reaction()","rate_reversal()","rate_roe()","rate_stock_price_dev_half_year()","rate_stock_price_dev_one_year()","rate_stock_price_momentum()","read_files()","read_isin_from_file()","show()","show()","show()","show()","step_back_in_time()","to_readable_comp_size()","to_s()","to_t()","update()","update()","update()","readme_for_app"],"longSearchIndex":["analystsopinion","applicationcontroller","applicationhelper","assetvalue","averagepriceearningsratio","basicextractor","basicindexparser","boerseextractor","currentpriceearningsratio","dataminingerror","daxindexparser","dowindexparser","ebitmargin","equityratio","finanzenextractor","indiceshelper","insiderdeal","insiderdealscontroller","insiderdealshelper","invalidisinerror","momentum","onvistaextractor","onvistaindexvalueextractor","onvistaquarterlyfiguresextractor","onvistastockvalueextractor","profitgrowth","profitrevision","ratingunit","reaction","returnonequity","reversal","scorecard","scorecardscontroller","scorecardshelper","share","sharescontroller","shareshelper","stockindex","stockindicescontroller","stockpricedevhalfyear","stockpricedevoneyear","stockprocessor","unexpectedhtmlstructure","util","util::add_millenium()","util::add_millennium()","shareshelper#assemble_url()","scorecardscontroller#assess_share()","util::avoid_exchange_closed()","util::avoid_weekend()","applicationhelper#check_place()","onvistastockvalueextractor#construct_search_url()","util::contains_escaped_html_sequence?()","util::content_to_file()","insiderdealscontroller#create()","sharescontroller#create()","stockindicescontroller#create()","util::crop_millennium()","util::days_between()","insiderdealscontroller#destroy()","scorecardscontroller#destroy()","sharescontroller#destroy()","stockindicescontroller#destroy()","insiderdealscontroller#edit()","sharescontroller#edit()","stockindicescontroller#edit()","util::ensure_string()","basicextractor#extract_analysts_opinion()","finanzenextractor#extract_analysts_opinion()","onvistaextractor#extract_analysts_opinion()","basicextractor#extract_average_price_earnings_ratio()","onvistaextractor#extract_average_price_earnings_ratio()","basicextractor#extract_current_price_earnings_ratio()","onvistaextractor#extract_current_price_earnings_ratio()","basicextractor#extract_ebit_margin()","onvistaextractor#extract_ebit_margin()","basicextractor#extract_equity_ratio()","onvistaextractor#extract_equity_ratio()","onvistaindexvalueextractor#extract_index_value_on()","finanzenextractor#extract_insider_deals()","onvistaextractor#extract_profit_growth()","basicextractor#extract_profit_revision()","onvistaextractor#extract_profit_revision()","basicextractor#extract_proft_growth()","basicextractor#extract_reaction_on_figures()","finanzenextractor#extract_reaction_on_figures()","onvistaextractor#extract_reaction_on_figures()","onvistaquarterlyfiguresextractor#extract_release_date()","basicextractor#extract_roe()","boerseextractor#extract_roe()","onvistaextractor#extract_roe()","basicextractor#extract_stock_name()","boerseextractor#extract_stock_name()","onvistaextractor#extract_stock_name()","basicextractor#extract_stock_price()","boerseextractor#extract_stock_price()","onvistaextractor#extract_stock_price()","basicextractor#extract_stock_price_dev_half_year()","onvistaextractor#extract_stock_price_dev_half_year()","basicextractor#extract_stock_price_dev_one_year()","onvistaextractor#extract_stock_price_dev_one_year()","onvistastockvalueextractor#extract_stock_value_on()","basicextractor#extract_three_month_reversal()","onvistaextractor#extract_three_month_reversal()","util::format()","util::format_date_time()","onvistastockvalueextractor#get_asset_name()","dowindexparser#get_dow_entries()","basicindexparser#get_entries_of_index()","onvistaindexvalueextractor#get_on_vista_index_id()","onvistastockvalueextractor#get_stock_exchange_id()","stockprocessor#go()","insiderdealscontroller#index()","scorecardscontroller#index()","sharescontroller#index()","stockindicescontroller#index()","util::information_expired()","util::isin_to_wkn()","util::l10n_f()","util::l10n_f_k()","util::last_work_day_before()","sharescontroller#lookup_insider_trades()","basicindexparser#map_stock_exchange()","assetvalue::new()","basicextractor::new()","basicindexparser::new()","boerseextractor::new()","daxindexparser::new()","dowindexparser::new()","finanzenextractor::new()","insiderdealscontroller#new()","onvistaextractor::new()","onvistaindexvalueextractor::new()","onvistaquarterlyfiguresextractor::new()","onvistastockvalueextractor::new()","sharescontroller#new()","stockindicescontroller#new()","stockprocessor::new()","basicextractor#open_sub_page()","util::perf()","sharescontroller#perform_action_on_selection()","basicextractor#perform_search()","daxindexparser#process_dax_entries()","dowindexparser#process_dow_entries()","ratingunit::rate_analysts_opinion()","ratingunit::rate_average_price_earnings_ratio()","ratingunit::rate_current_price_earnings_ratio()","ratingunit::rate_ebit_margin()","ratingunit::rate_equity_ratio()","ratingunit::rate_profit_growth()","ratingunit::rate_profit_revision()","ratingunit::rate_reaction()","ratingunit::rate_reversal()","ratingunit::rate_roe()","ratingunit::rate_stock_price_dev_half_year()","ratingunit::rate_stock_price_dev_one_year()","ratingunit::rate_stock_price_momentum()","util::read_files()","util::read_isin_from_file()","insiderdealscontroller#show()","scorecardscontroller#show()","sharescontroller#show()","stockindicescontroller#show()","util::step_back_in_time()","shareshelper#to_readable_comp_size()","share#to_s()","util::to_t()","insiderdealscontroller#update()","sharescontroller#update()","stockindicescontroller#update()",""],"info":[["AnalystsOpinion","","AnalystsOpinion.html","",""],["ApplicationController","","ApplicationController.html","",""],["ApplicationHelper","","ApplicationHelper.html","",""],["AssetValue","","AssetValue.html","","<p>Describes the opening and closign value of an asset (e.g. a share or an\nindex) traded at a stock exchange …\n"],["AveragePriceEarningsRatio","","AveragePriceEarningsRatio.html","",""],["BasicExtractor","","BasicExtractor.html","","<p>Encapsulate the functionality all extractors have in common.\n"],["BasicIndexParser","","BasicIndexParser.html","","<p>Ecapsulates alle basic functionality for parsing an index on the onVista\nhomepage.\n"],["BoerseExtractor","","BoerseExtractor.html","","<p>This class has the capability to extract all information neccessary to\nevaluate a stock against the rules …\n"],["CurrentPriceEarningsRatio","","CurrentPriceEarningsRatio.html","",""],["DataMiningError","","DataMiningError.html","","<p>This exceptions are thrown by data miners if none critical error occur and\nthe algorithm can recover …\n"],["DaxIndexParser","","DaxIndexParser.html","","<p>require ‘engine/parser/dax_index_parser.rb’ This class is capable of\nparsing the DAX index at the on …\n"],["DowIndexParser","","DowIndexParser.html","","<p>require ‘engine/parser/dow_index_parser.rb’ This class is capable of\nparsing the Dow Jones (DOW) index …\n"],["EbitMargin","","EbitMargin.html","",""],["EquityRatio","","EquityRatio.html","",""],["FinanzenExtractor","","FinanzenExtractor.html","","<p>This class has the capability to extract allor at least a part of the\ninformation neccessary to evaluate …\n"],["IndicesHelper","","IndicesHelper.html","",""],["InsiderDeal","","InsiderDeal.html","",""],["InsiderDealsController","","InsiderDealsController.html","",""],["InsiderDealsHelper","","InsiderDealsHelper.html","",""],["InvalidIsinError","","InvalidIsinError.html","","<p>This exception is thrown when a processed ISIN turns out as invalid\n"],["Momentum","","Momentum.html","",""],["OnVistaExtractor","","OnVistaExtractor.html","","<p>This class has the capability to extract all information neccessary to\nevaluate a stock against the rules …\n"],["OnVistaIndexValueExtractor","","OnVistaIndexValueExtractor.html","","<p>Provides the functionality of calculating the value of an index at a given\nhistorical date\n"],["OnVistaQuarterlyFiguresExtractor","","OnVistaQuarterlyFiguresExtractor.html","","<p>Extracts the latest date and the reaction when quarterly figures were\nreleased for a given stock\n"],["OnVistaStockValueExtractor","","OnVistaStockValueExtractor.html","","<p>Provides the functionality of calculating the value of a share at a given\nhistorical date\n"],["ProfitGrowth","","ProfitGrowth.html","",""],["ProfitRevision","","ProfitRevision.html","",""],["RatingUnit","","RatingUnit.html","","<p>Capable of rating each figure with -1,0 or +1\n"],["Reaction","","Reaction.html","",""],["ReturnOnEquity","","ReturnOnEquity.html","","<p>Data object for Return on Equity (RoE) last year Eigenkapitalrendite des\nletzten Jahres- Lohn des Unternehmers …\n"],["Reversal","","Reversal.html","",""],["ScoreCard","","ScoreCard.html","","<p>Contains all extracted data for a certain stock\n"],["ScoreCardsController","","ScoreCardsController.html","",""],["ScoreCardsHelper","","ScoreCardsHelper.html","",""],["Share","","Share.html","",""],["SharesController","","SharesController.html","",""],["SharesHelper","","SharesHelper.html","",""],["StockIndex","","StockIndex.html","",""],["StockIndicesController","","StockIndicesController.html","",""],["StockPriceDevHalfYear","","StockPriceDevHalfYear.html","",""],["StockPriceDevOneYear","","StockPriceDevOneYear.html","",""],["StockProcessor","","StockProcessor.html","","<p>Algorithm for evaluating the 13 rules defined by Susan Levermann.\n<p>Thirteen figures are extracted and evaluated …\n"],["UnexpectedHtmlStructure","","UnexpectedHtmlStructure.html","","<p>This exception signals that a HTML element could not be accessed as\nexpected. Further execution of the …\n"],["Util","","Util.html","","<p>Provides static support methods\n"],["add_millenium","Util","Util.html#method-c-add_millenium","(date)","<p>Ensures that the year part of a date consists of four digits: dd.MM.yy\n-&gt; dd.MM.yyyy\n"],["add_millennium","Util","Util.html#method-c-add_millennium","(date)","<p>Add the millennium part of a date eg. 27.04.12 -&gt; 27.04.2012\n"],["assemble_url","SharesHelper","SharesHelper.html#method-i-assemble_url","(share)",""],["assess_share","ScoreCardsController","ScoreCardsController.html#method-i-assess_share","()",""],["avoid_exchange_closed","Util","Util.html#method-c-avoid_exchange_closed","(date)","<p>Checks if the stock exchange has closed at a given date. If so a day before\nthat public holiday is returned. …\n"],["avoid_weekend","Util","Util.html#method-c-avoid_weekend","(date)","<p>Checks if a date is a sunday or saturday. If so the friday before the\nweekend is returned\n"],["check_place","ApplicationHelper","ApplicationHelper.html#method-i-check_place","(link, url)","<p>Checks if a given link is the one currently requested by the client\n"],["construct_search_url","OnVistaStockValueExtractor","OnVistaStockValueExtractor.html#method-i-construct_search_url","(historical_date)","<p>Construct the search URL to get the stock value for a historical date\n<p><code>historical_date</code> - a date in the ...\n\n"],["contains_escaped_html_sequence?","Util","Util.html#method-c-contains_escaped_html_sequence-3F","(text)","<p>Checks a given string for the ocurence of an html escaped pattern\n<p><code>text</code> - the string to be checked\n\n"],["content_to_file","Util","Util.html#method-c-content_to_file","(content, file_name)","<p>Streams some content to a file (Mechanize::Page.body) If possible use\nMechanize::Page.save_as(file_name) …\n"],["create","InsiderDealsController","InsiderDealsController.html#method-i-create","()","<p>POST /insider_deals POST /insider_deals.json\n"],["create","SharesController","SharesController.html#method-i-create","()","<p>POST /shares POST /shares.json\n"],["create","StockIndicesController","StockIndicesController.html#method-i-create","()","<p>POST /indices POST /indices.json\n"],["crop_millennium","Util","Util.html#method-c-crop_millennium","(date)","<p>Crops the millennium part of a date eg. 27.04.2012 -&gt; 27.04.12\n"],["days_between","Util","Util.html#method-c-days_between","(date_one, date_two)","<p>Calculates the number of days between two time objects\n<p><code>date_one</code> - the first time object (must be before ...\n"],["destroy","InsiderDealsController","InsiderDealsController.html#method-i-destroy","()","<p>DELETE /insider_deals/1 DELETE /insider_deals/1.json\n"],["destroy","ScoreCardsController","ScoreCardsController.html#method-i-destroy","()","<p>DELETE /score_cards/1 DELETE /score_cards/1.json\n"],["destroy","SharesController","SharesController.html#method-i-destroy","()","<p>DELETE /shares/1 DELETE /shares/1.json\n"],["destroy","StockIndicesController","StockIndicesController.html#method-i-destroy","()","<p>DELETE /indices/1 DELETE /indices/1.json\n"],["edit","InsiderDealsController","InsiderDealsController.html#method-i-edit","()","<p>GET /insider_deals/1/edit\n"],["edit","SharesController","SharesController.html#method-i-edit","()","<p>GET /shares/1/edit\n"],["edit","StockIndicesController","StockIndicesController.html#method-i-edit","()","<p>GET /indices/1/edit\n"],["ensure_string","Util","Util.html#method-c-ensure_string","(time)","<p>A supplied time object is converted into a plain string\n"],["extract_analysts_opinion","BasicExtractor","BasicExtractor.html#method-i-extract_analysts_opinion","(analysts_opinion)","<p>Extract the opinion of the analysts (Analystenmeinungen)\n"],["extract_analysts_opinion","FinanzenExtractor","FinanzenExtractor.html#method-i-extract_analysts_opinion","(analysts_opinion)","<p>Extract the opinion of the analysts (Analystenmeinungen)\n"],["extract_analysts_opinion","OnVistaExtractor","OnVistaExtractor.html#method-i-extract_analysts_opinion","(analysts_opinion)","<p>Extract the opinion of the analysts (Analystenmeinungen) ruby -I test\ntest/integration/extract_analysts_opinion_test.rb …\n"],["extract_average_price_earnings_ratio","BasicExtractor","BasicExtractor.html#method-i-extract_average_price_earnings_ratio","(average_price_earnings_ratio)","<p>Extract the average price earnings ratio (KGV5)\n"],["extract_average_price_earnings_ratio","OnVistaExtractor","OnVistaExtractor.html#method-i-extract_average_price_earnings_ratio","(average_price_earnings_ratio)","<p>Extract the average price earnings ratio (KGV 5 Jahre) ruby -I test\ntest/integration/extract_average_price_earnings_test.rb …\n"],["extract_current_price_earnings_ratio","BasicExtractor","BasicExtractor.html#method-i-extract_current_price_earnings_ratio","(current_price_earnings_ratio)","<p>Extract the current price earnings ratio (KGV)\n"],["extract_current_price_earnings_ratio","OnVistaExtractor","OnVistaExtractor.html#method-i-extract_current_price_earnings_ratio","(current_price_earnings_ratio)","<p>Extract the current price earnings ratio (KGV) ruby -I test\ntest/integration/extract_current_price_earnings_test.rb …\n"],["extract_ebit_margin","BasicExtractor","BasicExtractor.html#method-i-extract_ebit_margin","(ebit_margin)","<p>Extract EBIT-Margin\n"],["extract_ebit_margin","OnVistaExtractor","OnVistaExtractor.html#method-i-extract_ebit_margin","(ebit_margin)","<p>Extract EBIT-Margin ruby -I test test/integration/extract_ebit_test.rb\n"],["extract_equity_ratio","BasicExtractor","BasicExtractor.html#method-i-extract_equity_ratio","(equity_ratio)","<p>Extract equity ratio (Eigenkapitalquote)\n"],["extract_equity_ratio","OnVistaExtractor","OnVistaExtractor.html#method-i-extract_equity_ratio","(equity_ratio)","<p>Extract equity ratio (Eigenkapitalquote) ruby -I test\ntest/integration/extract_equity_ratio_test.rb\n"],["extract_index_value_on","OnVistaIndexValueExtractor","OnVistaIndexValueExtractor.html#method-i-extract_index_value_on","(historical_date)","<p>Extract the open and closeing values of an index\n<code>historical_date</code> the date used to look up the price of …\n"],["extract_insider_deals","FinanzenExtractor","FinanzenExtractor.html#method-i-extract_insider_deals","(results)",""],["extract_profit_growth","OnVistaExtractor","OnVistaExtractor.html#method-i-extract_profit_growth","(profit_growth)","<p>Extract profit growth (Gewinnwachstum) ruby -I test\ntest/integration/extract_profit_growth_test.rb\n"],["extract_profit_revision","BasicExtractor","BasicExtractor.html#method-i-extract_profit_revision","(profit_revision)","<p>Extract the revision of estimated profits\n"],["extract_profit_revision","OnVistaExtractor","OnVistaExtractor.html#method-i-extract_profit_revision","(profit_revision)","<p>Extract the revision of estimated profits ruby -I test\ntest/integration/extract_profit_revision_test.rb …\n"],["extract_proft_growth","BasicExtractor","BasicExtractor.html#method-i-extract_proft_growth","(profit_growth)",""],["extract_reaction_on_figures","BasicExtractor","BasicExtractor.html#method-i-extract_reaction_on_figures","(reaction)","<p>Extract the reaction on the release of quarterly figures\n"],["extract_reaction_on_figures","FinanzenExtractor","FinanzenExtractor.html#method-i-extract_reaction_on_figures","(reaction)","<p>Extract the reaction on the release of quarterly figures\n"],["extract_reaction_on_figures","OnVistaExtractor","OnVistaExtractor.html#method-i-extract_reaction_on_figures","(reaction)","<p>Extract the reaction on the release of quarterly figures ruby -I test\ntest/integration/extract_reaction_on_figures_test.rb …\n"],["extract_release_date","OnVistaQuarterlyFiguresExtractor","OnVistaQuarterlyFiguresExtractor.html#method-i-extract_release_date","()","<p>Extract the value of the stock and the value of the index when the\nquarterly figures were released.  …\n"],["extract_roe","BasicExtractor","BasicExtractor.html#method-i-extract_roe","(return_on_equity)","<p>Extract the Return on Equity (in German: Eigenkapitalrendite)\n"],["extract_roe","BoerseExtractor","BoerseExtractor.html#method-i-extract_roe","(return_on_equity)","<p>Extract the Return on Equity (RoE) in German: Eigenkapitalrendite\n"],["extract_roe","OnVistaExtractor","OnVistaExtractor.html#method-i-extract_roe","(return_on_equity)","<p>Extract Return on Equity (RoE) in German: Eigenkapitalrendite ruby -I test\ntest/integration/extract_roe_test.rb …\n"],["extract_stock_name","BasicExtractor","BasicExtractor.html#method-i-extract_stock_name","()","<p>Extract the name of the stock\n"],["extract_stock_name","BoerseExtractor","BoerseExtractor.html#method-i-extract_stock_name","()","<p>Extract the name of the stock\n"],["extract_stock_name","OnVistaExtractor","OnVistaExtractor.html#method-i-extract_stock_name","()","<p>Extract the name of the stock\n"],["extract_stock_price","BasicExtractor","BasicExtractor.html#method-i-extract_stock_price","()","<p>Extract the current price of the stock\n"],["extract_stock_price","BoerseExtractor","BoerseExtractor.html#method-i-extract_stock_price","()","<p>Extract the current price of the stock\n"],["extract_stock_price","OnVistaExtractor","OnVistaExtractor.html#method-i-extract_stock_price","()","<p>Extract the current price of the stock\n"],["extract_stock_price_dev_half_year","BasicExtractor","BasicExtractor.html#method-i-extract_stock_price_dev_half_year","(stock_price_dev_half_year)",""],["extract_stock_price_dev_half_year","OnVistaExtractor","OnVistaExtractor.html#method-i-extract_stock_price_dev_half_year","(stock_price_dev_half_year)","<p>Extract the stock price development for the last half year ruby -I test\ntest/integration/extract_stock_price_dev_half_year_test.rb …\n"],["extract_stock_price_dev_one_year","BasicExtractor","BasicExtractor.html#method-i-extract_stock_price_dev_one_year","(stock_price_dev_one_year)",""],["extract_stock_price_dev_one_year","OnVistaExtractor","OnVistaExtractor.html#method-i-extract_stock_price_dev_one_year","(stock_price_dev_one_year)","<p>Extract the stock price development for the last year ruby -I test\ntest/integration/extract_stock_price_dev_one_year_test.rb …\n"],["extract_stock_value_on","OnVistaStockValueExtractor","OnVistaStockValueExtractor.html#method-i-extract_stock_value_on","(historical_date)","<p>Extract the open and closing values of a stock\n"],["extract_three_month_reversal","BasicExtractor","BasicExtractor.html#method-i-extract_three_month_reversal","(reversal)",""],["extract_three_month_reversal","OnVistaExtractor","OnVistaExtractor.html#method-i-extract_three_month_reversal","(reversal)","<p>Extract the stock price and the index value for the last four months ruby\n-I test test/integration/extract_three_month_reversal_test.rb …\n"],["format","Util","Util.html#method-c-format","(date)","<p>Apply default date format\n"],["format_date_time","Util","Util.html#method-c-format_date_time","(date)","<p>Apply default date time format\n"],["get_asset_name","OnVistaStockValueExtractor","OnVistaStockValueExtractor.html#method-i-get_asset_name","()","<p>The asset name of the stock,should look like: ‘Du-Pont’\nwww.onvista.de/aktien/Du-Pont-Aktie-US2635341090 …\n"],["get_dow_entries","DowIndexParser","DowIndexParser.html#method-i-get_dow_entries","()",""],["get_entries_of_index","BasicIndexParser","BasicIndexParser.html#method-i-get_entries_of_index","(url, exp_size)","<p>Extract all entries of the given index URL <code>url</code> - the homepage\nof the index with listed entries <code>exp_size</code> …\n"],["get_on_vista_index_id","OnVistaIndexValueExtractor","OnVistaIndexValueExtractor.html#method-i-get_on_vista_index_id","(index_page)","<p>Return the onVista specific index ID\n"],["get_stock_exchange_id","OnVistaStockValueExtractor","OnVistaStockValueExtractor.html#method-i-get_stock_exchange_id","()","<p>The stock exchange ID, should look like: ‘?notationId=37967484’\n"],["go","StockProcessor","StockProcessor.html#method-i-go","()","<p>Start the evaluation\n"],["index","InsiderDealsController","InsiderDealsController.html#method-i-index","()","<p>GET /insider_deals GET /insider_deals.json\n"],["index","ScoreCardsController","ScoreCardsController.html#method-i-index","()","<p>GET /score_cards GET /score_cards.json\n"],["index","SharesController","SharesController.html#method-i-index","()","<p>GET /shares GET /shares.json\n"],["index","StockIndicesController","StockIndicesController.html#method-i-index","()","<p>GET /indices GET /indices.json\n"],["information_expired","Util","Util.html#method-c-information_expired","(date, threshold)","<p>Checks if a given information is older than a certain threshold (in\nseconds).\n"],["isin_to_wkn","Util","Util.html#method-c-isin_to_wkn","(isin)","<p>Extract the 6 digits that represent the WKN\n"],["l10n_f","Util","Util.html#method-c-l10n_f","(s)","<p>Convert a decimal separator from comma (,) to dot (.)\n"],["l10n_f_k","Util","Util.html#method-c-l10n_f_k","(value)","<p>Convert a string to a float like 7.108,27 -&gt; 7108.27 by eliminating the\nkilo separator and replacing …\n"],["last_work_day_before","Util","Util.html#method-c-last_work_day_before","(date)","<p>TODO we still need to handle public holiday\n"],["lookup_insider_trades","SharesController","SharesController.html#method-i-lookup_insider_trades","()",""],["map_stock_exchange","BasicIndexParser","BasicIndexParser.html#method-i-map_stock_exchange","(raw_value)",""],["new","AssetValue","AssetValue.html#method-c-new","(date)","<p>The constructor that expects a date which represents the validity of\nopening and closing values\n<p><code>date</code> ...\n\n"],["new","BasicExtractor","BasicExtractor.html#method-c-new","(extractor_url, share)","<p>Set up the HTML pareser, load the web page of the extractor.\n"],["new","BasicIndexParser","BasicIndexParser.html#method-c-new","()",""],["new","BoerseExtractor","BoerseExtractor.html#method-c-new","(share)",""],["new","DaxIndexParser","DaxIndexParser.html#method-c-new","()",""],["new","DowIndexParser","DowIndexParser.html#method-c-new","()",""],["new","FinanzenExtractor","FinanzenExtractor.html#method-c-new","(share)",""],["new","InsiderDealsController","InsiderDealsController.html#method-i-new","()","<p>GET /insider_deals/new GET /insider_deals/new.json\n"],["new","OnVistaExtractor","OnVistaExtractor.html#method-c-new","(share)",""],["new","OnVistaIndexValueExtractor","OnVistaIndexValueExtractor.html#method-c-new","(agent, index_page)",""],["new","OnVistaQuarterlyFiguresExtractor","OnVistaQuarterlyFiguresExtractor.html#method-c-new","(agent, stock_page)","<p>Load the profile page for a certain stock with the internal onVista sock id\n"],["new","OnVistaStockValueExtractor","OnVistaStockValueExtractor.html#method-c-new","(agent, stock_page, stock_exchange)",""],["new","SharesController","SharesController.html#method-i-new","()","<p>GET /shares/new GET /shares/new.json\n"],["new","StockIndicesController","StockIndicesController.html#method-i-new","()","<p>GET /indices/new GET /indices/new.json\n"],["new","StockProcessor","StockProcessor.html#method-c-new","(score_card)","<p>The supplied score_card is populated with the calculated figures.\n"],["open_sub_page","BasicExtractor","BasicExtractor.html#method-i-open_sub_page","(link_text, result_size, link_index, page=@stock_page)","<p>Open a sub page on the given page by searching for a given link.\n<p><code>link_text</code> - the name of the link\n<p><code>result_size</code> ...\n"],["perf","Util","Util.html#method-c-perf","(t2, t1)","<p>Calculates the performance between two values in percent  t2: value at the\nnewer date t1: value at the …\n"],["perform_action_on_selection","SharesController","SharesController.html#method-i-perform_action_on_selection","()",""],["perform_search","BasicExtractor","BasicExtractor.html#method-i-perform_search","(attribute, regexp, field_name, search_pattern, success_xpath, success_value)","<p>Search for a given ISIN.\n<p><code>attribute</code> - used xpath attribute to identify the search form\n<p><code>regexp</code> - the value ...\n"],["process_dax_entries","DaxIndexParser","DaxIndexParser.html#method-i-process_dax_entries","(stock_listing)",""],["process_dow_entries","DowIndexParser","DowIndexParser.html#method-i-process_dow_entries","(stock_listing)",""],["rate_analysts_opinion","RatingUnit","RatingUnit.html#method-c-rate_analysts_opinion","(analysts_opinion)","<p>TODO: Assess the analysts opinions For large caps:\n<p>if the majority says sell we rate +1\n<p>if the majority …\n"],["rate_average_price_earnings_ratio","RatingUnit","RatingUnit.html#method-c-rate_average_price_earnings_ratio","(per)","<p>Assess the average price earnings ratio value\n<p>per the average price earnings ratio\n\n"],["rate_current_price_earnings_ratio","RatingUnit","RatingUnit.html#method-c-rate_current_price_earnings_ratio","(per)","<p>Assess the current price earnings ratio value\n<p>per the current price earnings ratio\n\n"],["rate_ebit_margin","RatingUnit","RatingUnit.html#method-c-rate_ebit_margin","(ebit_margin)","<p>Assess the ebit margin value\n"],["rate_equity_ratio","RatingUnit","RatingUnit.html#method-c-rate_equity_ratio","(equity_ratio)","<p>Assess the equity ratio value\n"],["rate_profit_growth","RatingUnit","RatingUnit.html#method-c-rate_profit_growth","(profit_growth)","<p>Assess the profit growth\n"],["rate_profit_revision","RatingUnit","RatingUnit.html#method-c-rate_profit_revision","(profit_revision)","<p>Assess the profit revision value\n"],["rate_reaction","RatingUnit","RatingUnit.html#method-c-rate_reaction","(reaction)","<p>Assess the reaction on the release of quarterly figures\n"],["rate_reversal","RatingUnit","RatingUnit.html#method-c-rate_reversal","(reversal)","<p>Assess the three month reversal\n"],["rate_roe","RatingUnit","RatingUnit.html#method-c-rate_roe","(return_on_equity)","<p>Assess the return on equity value\n"],["rate_stock_price_dev_half_year","RatingUnit","RatingUnit.html#method-c-rate_stock_price_dev_half_year","(stock_price_dev_half_year)","<p>Assess the half year stock price development\n"],["rate_stock_price_dev_one_year","RatingUnit","RatingUnit.html#method-c-rate_stock_price_dev_one_year","(stock_price_dev_one_year)","<p>Assess the one year stock price development\n"],["rate_stock_price_momentum","RatingUnit","RatingUnit.html#method-c-rate_stock_price_momentum","(momentum)","<p>Assess the stock price momentum\n"],["read_files","Util","Util.html#method-c-read_files","(file_pattern)","<p>Read ISIN - stock name pairs from several files (e.g. *.txt)\n"],["read_isin_from_file","Util","Util.html#method-c-read_isin_from_file","(file_name)","<p>Reads ISIN - stock name pairs from a text file\n"],["show","InsiderDealsController","InsiderDealsController.html#method-i-show","()","<p>GET /insider_deals/1 GET /insider_deals/1.json\n"],["show","ScoreCardsController","ScoreCardsController.html#method-i-show","()","<p>GET /score_cards/1 GET /score_cards/1.json\n"],["show","SharesController","SharesController.html#method-i-show","()","<p>GET /shares/1 GET /shares/1.json\n"],["show","StockIndicesController","StockIndicesController.html#method-i-show","()","<p>GET /indices/1 GET /indices/1.json\n"],["step_back_in_time","Util","Util.html#method-c-step_back_in_time","(days, date)","<p>Calculates a date in the past by subtracting a certain amount of days from\na given date\n<p><code>days</code> - number ...\n"],["to_readable_comp_size","SharesHelper","SharesHelper.html#method-i-to_readable_comp_size","(i)",""],["to_s","Share","Share.html#method-i-to_s","()",""],["to_t","Util","Util.html#method-c-to_t","(date)","<p>Convert a given date pattern like 28.01.1948 (dd.MM.yyyy) into a time\nobject.\n"],["update","InsiderDealsController","InsiderDealsController.html#method-i-update","()","<p>PUT /insider_deals/1 PUT /insider_deals/1.json\n"],["update","SharesController","SharesController.html#method-i-update","()","<p>PUT /shares/1 PUT /shares/1.json\n"],["update","StockIndicesController","StockIndicesController.html#method-i-update","()","<p>PUT /indices/1 PUT /indices/1.json\n"],["README_FOR_APP","","doc/README_FOR_APP.html","","<p>TODOs\n<p>Run “rake doc:app” to generate this API documentation.\n<p>All price or value calculations …\n"]]}}